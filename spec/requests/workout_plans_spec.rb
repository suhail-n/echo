require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/workout_plans", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # WorkoutPlan. As you add validations to WorkoutPlan, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }

  let(:valid_attributes) {
    {
      name: "My Workout Plan",
      user_id: user.id,
      is_template: false,
      is_published: false
    }
  }

  let(:invalid_attributes) {
    {
      name: nil
    }
  }

  # authenticate user before each test
  before(:each) do
    # from warden
    # login_as(user, scope: :user)
    post user_session_path, params: {
      user: {
        email: user.email,
        password: user.password
      }
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      WorkoutPlan.create! valid_attributes
      get workout_plans_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      workout_plan = WorkoutPlan.create! valid_attributes
      get workout_plan_url(workout_plan)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_workout_plan_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      workout_plan = WorkoutPlan.create! valid_attributes
      get edit_workout_plan_url(workout_plan)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new WorkoutPlan" do
        expect {
          post workout_plans_url, params: { workout_plan: valid_attributes }
        }.to change(WorkoutPlan, :count).by(1)
      end

      it "redirects to the created workout_plan" do
        post workout_plans_url, params: { workout_plan: valid_attributes }
        expect(response).to redirect_to(workout_plan_url(WorkoutPlan.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new WorkoutPlan" do
        expect {
          post workout_plans_url, params: { workout_plan: invalid_attributes }
        }.to change(WorkoutPlan, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post workout_plans_url, params: { workout_plan: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "My Updated Workout Plan",
          user_id: user.id,
          is_template: false,
          is_published: true
        }
      }

      it "updates the requested workout_plan" do
        workout_plan = WorkoutPlan.create! valid_attributes
        patch workout_plan_url(workout_plan), params: { workout_plan: new_attributes }
        workout_plan.reload
        expect(workout_plan.name).to eq("My Updated Workout Plan")
        expect(workout_plan.is_published).to eq(true)
      end

      it "redirects to the workout_plan" do
        workout_plan = WorkoutPlan.create! valid_attributes
        patch workout_plan_url(workout_plan), params: { workout_plan: new_attributes }
        workout_plan.reload
        expect(response).to redirect_to(workout_plan_url(workout_plan))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        workout_plan = WorkoutPlan.create! valid_attributes
        patch workout_plan_url(workout_plan), params: { workout_plan: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested workout_plan" do
      workout_plan = WorkoutPlan.create! valid_attributes
      expect {
        delete workout_plan_url(workout_plan)
      }.to change(WorkoutPlan, :count).by(-1)
    end

    it "redirects to the workout_plans list" do
      workout_plan = WorkoutPlan.create! valid_attributes
      delete workout_plan_url(workout_plan)
      expect(response).to redirect_to(workout_plans_url)
    end
  end
end
